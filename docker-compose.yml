version: '3'
services:
  
  #PHP Service
  app:
    build:
      context: .
      dockerfile: Dockerfile
    image: digitalocean.com/php
    container_name: app
    restart: unless-stopped
    tty: true
    environment:
      SERVICE_NAME: app
      SERVICE_TAGS: dev
    working_dir: /var/www
    volumes:
      - ./:/var/www
      - ./php/local.ini:/usr/local/etc/php/conf.d/local.ini
    networks:
      - app-network

  # Nginx Service
  webserver:
    image: nginx:latest
    ports:
      - "80:80"  # Redirect HTTP to HTTPS
      - "443:443"  # HTTPS port
    restart: always
    volumes:
      - ./nginx/conf/:/etc/nginx/conf.d/:ro  # Read-only for configuration
      - certbot-etc:/etc/letsencrypt  # Persistent storage for certificates (new volume)
      - certbot-var:/var/www/certbot  # Temporary storage for challenges (new volume)
    depends_on:
      - certbot  # Ensure Certbot is ready before starting Nginx

  # Certbot service (updated)
  certbot:
    image: certbot/certbot
    volumes:
      - certbot-etc:/etc/letsencrypt  # Persistent storage for certificates (new volume)
      - certbot-var:/var/www/certbot  # Temporary storage for challenges (new volume)
      - ./nginx/conf/renewal:/etc/letsencrypt/renewal  # Include renewal configuration (new volume)
    command: ["certonly"]  # Only generate certificates, no automatic renewal

  db:
    image: mysql:5.7.22
    container_name: db
    restart: unless-stopped
    tty: true
    ports:
      - "3306:3306"
    environment:
      MYSQL_DATABASE: learning
      MYSQL_ROOT_PASSWORD: learning
      SERVICE_TAGS: dev
      SERVICE_NAME: mysql
    volumes:
      - dbdata:/var/lib/mysql/
      - ./mysql/my.cnf:/etc/mysql/my.cnf
      - ./mysql/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - app-network
  #phpmyadmin Service
  phpmyadmin:
    image: phpmyadmin/phpmyadmin
    container_name: phpmyadmin
    restart: unless-stopped
    ports:
      - "8080:80"
    environment:
      PMA_HOST: db
      PMA_PORT: 3306
      MYSQL_ROOT_PASSWORD: learning 
    depends_on:
      - db
    networks:
      - app-network
#Docker Networks
networks:
  app-network:
    driver: bridge
#Volumes
volumes:
  certbot-etc: {}
  certbot-var: {}
  certbot-renewal: {}  # New volume
  dbdata:
    driver: local
# Environment Variables
environment:
  CERTBOT_DOMAINS: phantasmify.com  
